name: Deploy to AWS App Runner

on:
  push:
    branches:
      - nagaraj  # Run workflow only when pushing to this branch

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout Repository
      - name: Checkout Repository
        uses: actions/checkout@v3

      # Step 2: Set Up AWS Credentials
      - name: Set Up AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}  # Use the region from GitHub secrets

      # Step 3: Login to Amazon ECR
      - name: Login to Amazon ECR
        id: ecr-login
        run: |
          AWS_ACCOUNT_ID=${{ secrets.AWS_ACCOUNT_ID }}  # Your AWS account ID
          AWS_REGION=${{ secrets.AWS_REGION }}  # Use the region from GitHub secrets
          REPO_NAME=${{ secrets.ECR_REPOSITORY_NAME }}  # ECR repository name from secrets
          IMAGE_URI="${{ secrets.ECR_REPOSITORY_URI }}"  # Full ECR URI from secrets
          
          # Log into ECR
          aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $IMAGE_URI
          docker info  # Ensure login was successful

      # Step 4: Build and Push Docker Image to ECR
      - name: Build and Push Docker Image to ECR
        env:
          IMAGE_URI: ${{ secrets.ECR_REPOSITORY_URI }}  # The ECR URI secret
        run: |
          IMAGE_TAG="$IMAGE_URI:latest"
          
          # Build the Docker image
          docker build -t $IMAGE_TAG .
          
          # Push the Docker image to ECR
          docker push $IMAGE_TAG
          echo "IMAGE_URI=$IMAGE_TAG" >> $GITHUB_ENV

      # Step 5: Deploy to AWS App Runner
      - name: Deploy to AWS App Runner
        run: |
          SERVICE_NAME="assetmanagement-ui"  # Change service name if needed
          IMAGE_URI="${{ env.IMAGE_URI }}"
          
          # Check if the service exists
          EXISTING_SERVICE=$(aws apprunner list-services --query "ServiceSummaryList[?ServiceName=='$SERVICE_NAME'].ServiceArn" --output text)

          if [ -n "$EXISTING_SERVICE" ]; then
            echo "Updating existing App Runner service..."
            aws apprunner update-service --service-arn $EXISTING_SERVICE \
              --source-configuration "ImageRepository={ImageIdentifier=$IMAGE_URI,ImageRepositoryType=ECR}"
          else
            echo "Creating new App Runner service..."
            aws apprunner create-service \
              --service-name $SERVICE_NAME \
              --source-configuration "ImageRepository={ImageIdentifier=$IMAGE_URI,ImageRepositoryType=ECR}" \
              --instance-configuration Cpu="1 vCpu",Memory="2GB"  # Corrected the format here
          fi

      # Step 6: Fetch App Runner Service URL
      - name: Fetch App Runner Service URL
        run: |
          SERVICE_NAME="assetmanagement-ui"  # Ensure the same name as your service
          APP_URL=$(aws apprunner describe-service --service-name $SERVICE_NAME --query "Service.Url" --output text)
          echo "Frontend is deployed and accessible at: $APP_URL"
