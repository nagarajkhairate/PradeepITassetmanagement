name: CI/CD for React App with AWS App Runner

on:
  push:
    branches:
      - nagaraj  # Trigger workflow on push to 'nagaraj' branch

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
      # Step 1: Checkout repository code
      - name: Checkout code
        uses: actions/checkout@v3
        
      # Step 2: Set up AWS credentials
      - name: Set up AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # Step 3: Log in to Amazon ECR
      - name: Log in to Amazon ECR
        run: |
          AWS_ACCOUNT_ID="${{ secrets.AWS_ACCOUNT_ID }}"
          AWS_REGION="${{ secrets.AWS_REGION }}"
          REPO_NAME="${{ secrets.ECR_REPOSITORY_NAME }}"  # Replace with your secret name
          aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com

      # Step 4: Build Docker image
      - name: Build Docker image
        run: |
          IMAGE_URI="${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.ECR_REPOSITORY_NAME }}:latest"
          docker build -t $IMAGE_URI .

      # Step 5: Push Docker image to ECR
      - name: Push Docker image to ECR
        run: |
          IMAGE_URI="${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.ECR_REPOSITORY_NAME }}:latest"
          docker push $IMAGE_URI

      # Step 6: Check if the App Runner service exists
      - name: Check if App Runner service exists
        id: check_service
        run: |
          SERVICE_NAME="assetmanagementui"
          EXISTING_SERVICE=$(aws apprunner list-services --query "ServiceSummaryList[?ServiceName=='$SERVICE_NAME'].ServiceArn" --output text)
          echo "Existing service ARN: $EXISTING_SERVICE"
          echo "::set-output name=existing-service::$EXISTING_SERVICE"

      # Step 7: Deploy to AWS App Runner
      - name: Deploy to AWS App Runner
        run: |
          SERVICE_NAME="assetmanagementui"
          IMAGE_URI="${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.ECR_REPOSITORY_NAME }}:latest"
          EXISTING_SERVICE="${{ steps.check_service.outputs.existing-service }}"
          
          if [ -n "$EXISTING_SERVICE" ]; then
            echo "Updating existing App Runner service..."
            aws apprunner update-service --service-arn $EXISTING_SERVICE --source-configuration "ImageRepository={ImageIdentifier=$IMAGE_URI,ImageRepositoryType=ECR}"
          else
            echo "Creating new App Runner service..."
            aws apprunner create-service \
              --service-name $SERVICE_NAME \
              --source-configuration "ImageRepository={ImageIdentifier=$IMAGE_URI,ImageRepositoryType=ECR}" \
              --instance-configuration Cpu=1 vCpu,Memory=2 GB
          fi

      # Step 8: Output App Runner service URL
      - name: Output App Runner service URL
        run: |
          SERVICE_NAME="assetmanagementui"
          APP_RUNNER_URL=$(aws apprunner describe-service --service-name $SERVICE_NAME --query "Service.Url" --output text)
          echo "Your AWS App Runner service is available at: $APP_RUNNER_URL"
          echo "::set-output name=app-runner-url::$APP_RUNNER_URL"
