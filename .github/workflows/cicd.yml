name: CI/CD Pipeline for React Application

on:
  push:
    branches:
      - nagaraj  # Change this to your branch name

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository
      - name: Checkout Repository
        uses: actions/checkout@v3

      # Step 2: Set up AWS credentials (AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY, AWS_REGION stored in GitHub Secrets)
      - name: Set up AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}  # Make sure the region is set properly

      # Step 3: Log in to Amazon ECR (Elastic Container Registry)
      - name: Login to Amazon ECR
        id: ecr-login
        run: |
          AWS_ACCOUNT_ID=${{ secrets.AWS_ACCOUNT_ID }}
          AWS_REGION=${{ secrets.AWS_REGION }}
          REPO_NAME=${{ secrets.ECR_REPOSITORY_NAME }}
          aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com

      # Step 4: Build the Docker image
      - name: Build Docker Image
        run: |
          IMAGE_URI="${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.ECR_REPOSITORY_NAME }}:latest"
          docker build -t $IMAGE_URI .
          echo "IMAGE_URI=$IMAGE_URI" >> $GITHUB_ENV

      # Step 5: Push the Docker image to ECR
      - name: Push Docker Image to Amazon ECR
        run: |
          IMAGE_URI="${{ env.IMAGE_URI }}"
          docker push $IMAGE_URI

      # Step 6: Deploy to AWS App Runner (Create or Update service)
      - name: Deploy to AWS App Runner
        run: |
          SERVICE_NAME="assetmanagement-ui"  # Change service name if needed
          IMAGE_URI="${{ env.IMAGE_URI }}"
          EXISTING_SERVICE=$(aws apprunner list-services --query "ServiceSummaryList[?ServiceName=='$SERVICE_NAME'].ServiceArn" --output text)
          if [ -n "$EXISTING_SERVICE" ]; then
            echo "Updating existing App Runner service..."
            aws apprunner update-service --service-arn $EXISTING_SERVICE --source-configuration "ImageRepository={ImageIdentifier=$IMAGE_URI,ImageRepositoryType=ECR}"
          else
            echo "Creating new App Runner service..."
            aws apprunner create-service \
              --service-name $SERVICE_NAME \
              --source-configuration "ImageRepository={ImageIdentifier=$IMAGE_URI,ImageRepositoryType=ECR}" \
              --instance-configuration Cpu=1 vCpu,Memory=2 GB
          fi
