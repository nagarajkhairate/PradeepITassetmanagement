name: CI/CD Pipeline with ECR and EKS

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  # Job to build Docker image and push to ECR
  docker-ecr:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the code from the repository
      - name: Checkout Code
        uses: actions/checkout@v2

      # Step 2: Set up AWS credentials (using GitHub secrets)
      - name: Set up AWS CLI
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # Step 3: Authenticate Docker to AWS ECR
      - name: Authenticate Docker to ECR
        run: |
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com

      # Step 4: Build Docker image
      - name: Build Docker Image
        run: docker build -t ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/asset-management-ui:${{ github.sha }} .

      # Step 5: Push Docker image to ECR
      - name: Push Docker Image to ECR
        run: |
          docker tag ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/asset-management-ui:${{ github.sha }} ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/asset-management-ui:${{ github.sha }}
          docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/asset-management-ui:${{ github.sha }}

  # Job to deploy to EKS
  eks-deployment:
    runs-on: ubuntu-latest
    needs: docker-ecr  # This ensures the EKS job runs after the docker-ecr job

    steps:
      # Step 1: Set up AWS credentials for EKS
      - name: Set up AWS CLI
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # Step 2: Install kubectl
      - name: Install kubectl
        run: |
          curl -LO https://storage.googleapis.com/kubernetes-release/release/v1.26.0/bin/linux/amd64/kubectl
          chmod +x ./kubectl
          sudo mv ./kubectl /usr/local/bin/kubectl

      # Step 3: Update kubeconfig for EKS
      - name: Update kubeconfig for EKS
        run: |
          aws eks update-kubeconfig --region ${{ secrets.AWS_REGION }} --name ${{ secrets.EKS_CLUSTER_NAME }}

      # Step 4: Deploy to EKS
      - name: Deploy to EKS
        run: |
          kubectl set image deployment/asset-management-ui asset-management-ui=${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/asset-management-ui:${{ github.sha }} --record
          kubectl rollout status deployment/asset-management-ui
