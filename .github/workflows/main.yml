name: Deploy to EC2 via SSH

on:
  push:
    branches:
      - main  # Adjust the branch name if necessary

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository
      - name: Checkout Repository
        uses: actions/checkout@v3

      # Step 2: Set up AWS credentials (for ECR access)
      - name: Set Up AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # Step 3: Login to Amazon ECR
      - name: Login to Amazon ECR
        id: ecr-login
        run: |
          AWS_ACCOUNT_ID=${{ secrets.AWS_ACCOUNT_ID }}
          AWS_REGION=${{ secrets.AWS_REGION }}
          IMAGE_URI="${{ secrets.ECR_REPOSITORY_URI }}"
          aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $IMAGE_URI
          docker info  # Ensure login was successful

      # Step 4: Build and Push Docker Image to ECR
      - name: Build and Push Docker Image to ECR
        env:
          IMAGE_URI: ${{ secrets.ECR_REPOSITORY_URI }}  # The ECR URI secret
        run: |
          IMAGE_TAG="$IMAGE_URI:latest"
          
          # Build the Docker image
          docker build -t $IMAGE_TAG .
          
          # Push the Docker image to ECR
          docker push $IMAGE_TAG
          echo "IMAGE_URI=$IMAGE_TAG" >> $GITHUB_ENV

      # Step 5: Set up SSH key for EC2 access
      - name: Set up SSH key
        run: |
          mkdir -p ~/.ssh  # Ensure the .ssh directory exists
          echo "${{ secrets.EC2_SSH_PRIVATE_KEY }}" | base64 --decode > ~/.ssh/id_rsa  # Decode and save private key
          chmod 600 ~/.ssh/id_rsa  # Ensure the private key has proper permissions
          touch ~/.ssh/known_hosts  # Create the known_hosts file if it doesn't exist
          ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts  # Add EC2 host to known_hosts for security

      # Step 6: SSH to EC2 and deploy Docker Image
      - name: Deploy to EC2 via SSH
        uses: appleboy/ssh-action@v0.1.5
        with:
          host: ${{ secrets.EC2_HOST }}  # The EC2 instance public IP or DNS name
          username: ${{ secrets.EC2_USER }}  # The EC2 username (e.g., ec2-user or ubuntu)
          key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}  # The private SSH key (GitHub secret)
          script: |
            # Pull the latest Docker image from ECR
            IMAGE_URI="${{ secrets.ECR_REPOSITORY_URI }}:latest"
            aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $IMAGE_URI
            docker pull $IMAGE_URI

            # Stop and remove any existing container with the same name
            docker ps -q --filter "name=assetmanagement-ui" | grep -q . && docker stop assetmanagement-ui && docker rm assetmanagement-ui

            # Run the new container
            docker run -d --name assetmanagement-ui -p 80:80 $IMAGE_URI

            # Optional: Clean up unused Docker images to save space
            docker image prune -f
