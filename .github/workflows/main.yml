name: Deploy to EC2 via SSH

on:
  push:
    branches:
      - main  # Run workflow when pushing to the main branch

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      # Set up SSH key for EC2 deployment
      - name: Set up SSH key
        run: |
          mkdir -p ~/.ssh  # Ensure .ssh directory exists
          echo "${{ secrets.EC2_SSH_PRIVATE_KEY }}" | base64 --decode > ~/.ssh/id_rsa  # Decode base64-encoded key
          chmod 600 ~/.ssh/id_rsa  # Ensure the key has proper permissions
          touch ~/.ssh/known_hosts  # Ensure known_hosts file exists
          ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts  # Add EC2 host to known_hosts

      # Set up AWS credentials for Docker login and image push to ECR
      - name: Set up AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # Login to Amazon ECR
      - name: Login to Amazon ECR
        run: |
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.ECR_REPOSITORY_URI }}

      # Build and push Docker image to ECR
      - name: Build and push Docker image
        run: |
          IMAGE_URI="${{ secrets.ECR_REPOSITORY_URI }}:latest"
          docker build -t $IMAGE_URI .
          docker push $IMAGE_URI

      # Deploy to EC2 via SSH
      - name: Deploy to EC2 via SSH
        uses: appleboy/ssh-action@v0.1.5
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
          script: |
            # Pull the latest Docker image from ECR
            IMAGE_URI="${{ secrets.ECR_REPOSITORY_URI }}:latest"
            aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin $IMAGE_URI
            docker pull $IMAGE_URI

            # Stop and remove any existing container with the same name
            docker ps -q --filter "name=assetmanagement-ui" | grep -q . && docker stop assetmanagement-ui && docker rm assetmanagement-ui

            # Run the new container
            docker run -d --name assetmanagement-ui -p 80:80 $IMAGE_URI

            # Optional: Clean up unused Docker images to save space
            docker image prune -f
