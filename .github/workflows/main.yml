name: CI/CD Pipeline for EC2 Deployment

on:
  push:
    branches:
      - main  # Trigger on push to the main branch (you can change this to any branch)

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the code
      - name: Checkout code
        uses: actions/checkout@v2

      # Step 2: Set up SSH for EC2
      - name: Set up SSH key for EC2
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_SSH_PRIVATE_KEY }}" | base64 --decode > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          touch ~/.ssh/known_hosts
          ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts

      # Step 3: Build Docker image
      - name: Build Docker image
        run: |
          docker build -t myapp .

      # Step 4: Authenticate to ECR
      - name: Authenticate to ECR
        run: |
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.ECR_REPOSITORY_URI }}

      # Step 5: Tag Docker image for ECR
      - name: Tag Docker image
        run: |
          docker tag myapp:latest ${{ secrets.ECR_REPOSITORY_URI }}:latest

      # Step 6: Push Docker image to ECR
      - name: Push Docker image to ECR
        run: |
          docker push ${{ secrets.ECR_REPOSITORY_URI }}:latest

      # Step 7: SSH into EC2 and deploy the Docker container
      - name: Deploy Docker container on EC2
        run: |
          ssh -o StrictHostKeyChecking=no ec2-user@${{ secrets.EC2_HOST }} << 'EOF'
            docker pull ${{ secrets.ECR_REPOSITORY_URI }}:latest
            docker stop myapp || true
            docker rm myapp || true
            docker run -d -p 80:80 --name myapp ${{ secrets.ECR_REPOSITORY_URI }}:latest
          EOF
